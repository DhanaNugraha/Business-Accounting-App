Got it ‚úÖ ‚Äî this is a significant but very nice change:
Instead of just **upload ‚Üí analyze ‚Üí download**, now the website becomes a **full editor** with multiple accounts, live balance calculation, and editable tables.

Here‚Äôs a **new all-in-one prompt** for your coding AI that incorporates your new format, editor workflow, and export.

---

# üìå New Prompt: Accounting Web App with Editable Transactions

Please generate a **full-stack project** with the following requirements:

---

## 1. Tech Stack

* **Backend:** FastAPI (Python)
* **Frontend:** React + TypeScript + TailwindCSS
* **Data Handling:** `pandas` + `openpyxl` for Excel read/write
* **Charts & UI:** Recharts for charts, React Table (or similar) for editable grid

---

## 2. Excel Template Format

The template file should have these columns (in Indonesian):

1. **Tanggal** ‚Üí date of transaction (YYYY-MM-DD)
2. **Uraian** ‚Üí description of transaction
3. **Penerimaan** ‚Üí one or more income entries (name + amount)
4. **Pengeluaran** ‚Üí one or more expense entries (name + amount)
5. **Saldo** ‚Üí auto-calculated balance (running total)

### Example Rows:

| Tanggal    | Uraian           | Penerimaan          | Pengeluaran         | Saldo      |
| ---------- | ---------------- | ------------------- | ------------------- | ---------- |
| 2025-01-01 | Modal Awal       | Tunai: 10,000,000   |                     | 10,000,000 |
| 2025-01-03 | Beli Barang      |                     | Supplier: 2,000,000 | 8,000,000  |
| 2025-01-05 | Penjualan Produk | Transfer: 3,000,000 |                     | 11,000,000 |

---

## 3. Multiple Accounts

* Support **multiple accounts** (e.g. ‚ÄúKas‚Äù, ‚ÄúBank‚Äù, ‚ÄúE-Wallet‚Äù).
* Each transaction belongs to one account.
* Each account maintains its **own running balance**.
* User can **switch between accounts** in the UI (dropdown or sidebar).

---

## 4. App Workflow

1. **Upload Excel**

   * User uploads a file in the defined format.
   * Backend parses it into JSON, preserving accounts & transactions.

2. **Editor UI**

   * Show transactions in an **editable table** (React Table or similar).
   * User can:

     * Add a new transaction (date, description, income/expense, account).
     * Edit any existing row inline.
     * Delete a transaction.
   * **Saldo column auto-updates** whenever transactions are changed.

3. **Download Excel**

   * After edits, user can **download the updated Excel** (same format).

4. **Optional Autosave**

   * If feasible, implement **autosave to browser localStorage** so changes are not lost if the user refreshes.

---

## 5. Backend (FastAPI)

Endpoints:

* `POST /upload` ‚Üí upload Excel, return JSON of accounts & transactions.
* `POST /save` ‚Üí receive JSON of accounts & transactions, return updated Excel file.
* `GET /template` ‚Üí download blank Excel template with correct headers.

Libraries:

* `fastapi`, `pydantic`, `uvicorn`
* `pandas`, `openpyxl`

---

## 6. Frontend (React + TS)

Pages/components:

* **UploadPage**:

  * Upload Excel ‚Üí send to backend ‚Üí receive structured JSON.
  * Store in React state.

* **EditorPage**:

  * Show dropdown to select account.
  * Show editable transaction table.
  * Auto-calc ‚ÄúSaldo‚Äù column live.
  * Buttons:

    * ‚ÄúAdd Transaction‚Äù
    * ‚ÄúDownload Excel‚Äù ‚Üí send JSON to backend ‚Üí receive file.
  * Optional: Autosave to `localStorage`.

* **ReportsPage** (optional but nice):

  * Use Recharts to show pie chart of expenses & bar chart of incomes by account.

---

## 7. Example JSON Format (from backend)

```json
{
  "accounts": [
    {
      "name": "Kas",
      "transactions": [
        {
          "tanggal": "2025-01-01",
          "uraian": "Modal Awal",
          "penerimaan": [{"source": "Tunai", "amount": 10000000}],
          "pengeluaran": [],
          "saldo": 10000000
        },
        {
          "tanggal": "2025-01-03",
          "uraian": "Beli Barang",
          "penerimaan": [],
          "pengeluaran": [{"source": "Supplier", "amount": 2000000}],
          "saldo": 8000000
        }
      ]
    },
    {
      "name": "Bank",
      "transactions": []
    }
  ]
}
```

---

## 8. Deliverables

* A working **FastAPI backend** with the 3 endpoints.
* A working **React frontend** with Upload ‚Üí Editor ‚Üí Download flow.
* An **Excel template** generator (`/template`).
* Ignore all user data (no DB, no persistence on server).

---

‚úÖ This way, the website is a **local editor + helper tool** for accounting, without storing user data.

---
